generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContactType {
  PHONE
  EMAIL
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  CASH
  ONLINE
}

enum PaymentStatus {
  PAID
  PENDING
}

enum RoleName {
  CHEF
  WAITER
  MANAGER
  HOST
  BARTENDER
}

model File {
  id           String   @id @default(uuid()) @db.Uuid
  filename     String
  originalname String
  path         String
  mimetype     String
  createdAt    DateTime @default(now())
  lastEditedAt DateTime @default(now()) @updatedAt
  user         User[]
  menu         Menu[]
}

model User {
  id               String        @id @default(uuid()) @db.Uuid
  email            String        @unique
  avatar_id        String?       @db.Uuid
  password         String
  firstName        String
  lastName         String
  phoneNumber      String        @unique
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt
  contacts         Contact[]
  addresses        UserAddress[]
  orders           Order[]
  payments         Payment[]
  reviews          Review[]
  reservations     Reservation[]
  happenings       Happenings[]
  file             File?         @relation(fields: [avatar_id], references: [id])
}

model Contact {
  id        String      @id @default(uuid()) @db.Uuid
  userId    String      @db.Uuid
  type      ContactType // enum field
  value     String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  user      User        @relation(fields: [userId], references: [id])
}

model Address {
  id            String        @id @default(uuid()) @db.Uuid
  street        String
  city          String
  state         String
  country       String
  postcode      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  userAddresses UserAddress[]
}

model UserAddress {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  addressId String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  address   Address  @relation(fields: [addressId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Category {
  id          String         @id @default(uuid()) @db.Uuid
  name        String
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt
  menus       MenuCategory[]
}

model Menu {
  id          String         @id @default(uuid()) @db.Uuid
  name        String
  file_id     String?        @db.Uuid
  description String?
  price       String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt
  orders      OrderMenu[]
  categories  MenuCategory[]
  review      Review[]
  file        File?          @relation(fields: [file_id], references: [id])
}

model MenuCategory {
  id         String   @id @default(uuid()) @db.Uuid
  menuId     String   @db.Uuid
  categoryId String   @db.Uuid
  menu       Menu     @relation(fields: [menuId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
}

model Order {
  id         String      @id @default(uuid()) @db.Uuid
  userId     String      @db.Uuid
  totalPrice String
  status     OrderStatus // enum field
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  user       User        @relation(fields: [userId], references: [id])
  menus      OrderMenu[]
  payments   Payment[]
}

model OrderMenu {
  id       String @id @default(uuid()) @db.Uuid
  orderId  String @db.Uuid
  menuId   String @db.Uuid
  order    Order  @relation(fields: [orderId], references: [id])
  menu     Menu   @relation(fields: [menuId], references: [id])
  quantity Int
}

model Payment {
  id        String        @id @default(uuid()) @db.Uuid
  orderId   String        @db.Uuid
  amount    String
  method    PaymentMethod // enum field
  status    PaymentStatus // enum field
  userId    String        @db.Uuid
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  order     Order         @relation(fields: [orderId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
}

model Reservation {
  id             String   @id @default(uuid()) @db.Uuid
  userId         String   @db.Uuid
  dateTime       DateTime
  numGuests      Int
  specialRequest String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model Review {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  menuId    String   @db.Uuid
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  menu      Menu     @relation(fields: [menuId], references: [id])
}

model Happenings {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  title       String
  description String?
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Employee {
  id          String   @id @default(uuid()) @db.Uuid
  firstName   String
  lastName    String
  email       String   @unique
  phoneNumber String   @unique
  roleId      String   @db.Uuid
  role        Role     @relation(fields: [roleId], references: [id])
  shifts      Shift[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Role {
  id          String     @id @default(uuid()) @db.Uuid
  name        RoleName // enum field
  description String?
  employees   Employee[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
}

model Shift {
  id         String   @id @default(uuid()) @db.Uuid
  employeeId String   @db.Uuid
  startTime  DateTime
  endTime    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  employee   Employee @relation(fields: [employeeId], references: [id])
}
